###
# app configuration
# http://docs.pylonsproject.org/projects/pyramid/en/lates/narr/environment.html
###

[app:main]
use = egg:{{cookiecutter.project_repo}}

pyramid.reload_templates = true
pyramid.debug_authorization = true
pyramid.debug_notfound = true
pyramid.debug_routematch = true
pyramid.default_locale_name = en
pyramid.includes = 
  pyramid_debugtoolbar
  # rollbar.contrib.pyramid
debugtoolbar.active_panels = performance

### Find tokens here: https://rollbar.com/VanOord/pyramid-app-###/settings/access_tokens/
# rollbar.access_token = <rollbar post_server_item>
# rollbar.client_access_token = <rollbar post_client_item>
# rollbar.environment = development
# rollbar.branch = master
# rollbar.root = %(here)s

sqlalchemy.url = postgresql://postgres:abc@127.0.0.1:5432/{{cookiecutter.project_name}}
datadirectory = faux_data

authentication_provider = ad_only
# Choose from: all, ad_only, local_only

### For local_only emails need to be sent to users from a Van Oord account
#email.smtp_fromaddr = ###@vanoord.com
#email.smtp_user = ###@vanoord.com
#email.smtp_password = ### 
#email.smtp_url = smtp.office365.com:587

### For ad_only the app needs to be registered in Azure
#ad.tenant_id =  d62ada1b-ca42-4fe2-b9e7-ceb843af0ad2
# The ad.tenant_id always is d62ada1b-ca42-4fe2-b9e7-ceb843af0ad2,
# referring to the Van Oord tenant. The client_id, client_secret and redirect_url
# refer to a specific application registration that needs to be set up
# via the Microsoft Application Registration Portal https://apps.dev.microsoft.com
# Unfortunately, this is a personal portal, so you can't access the applications 
# registered by your collegues. Erna registered an app on localhost:6543/authorized with:
#ad.client_id = 053b4e72-c976-447a-8289-9a838c3dad58
#ad.client_secret = npi7HSobOoX7tZq9VJDrdN6
#ad.redirect_url = http://localhost:6543/authorized

auth.secret = generate_secret_token_we254ty5gwrgh4je
session.secret = also_very_secret_3gu3q7b3or8bvf5
# set values above to long random character strings

#svn.passwordfile = htpasswd
# Optional, generates a htpasswod like file for use with e.g. svn login

#cookie.path = /app_path 
# Set tto this_app if hosted on a example.com/this_app, and you don't want
# to share the cookies with example.com/other_app' domain

#filter-with = proxy-prefix
# Enable when running behind a reverse proxy server

# By default, the toolbar only appears for clients from IP addresses
# '127.0.0.1' and '::1'.
debugtoolbar.hosts = 127.0.0.1 ::1


###
# reverse proxy configuration
# set filter-with in app:main, and include filter description below
###
[filter:proxy-prefix]
use = egg:PasteDeploy#prefix
prefix = /app_path
scheme = https

###
# wsgi server configuration
###

[server:main]
use = egg:waitress#main
host = 127.0.0.1
port = 6543

###
# logging configuration
# http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/logging.html
###

[loggers]
keys = root, {{cookiecutter.project_slug}}, pyramid_mod_accounts, pyramid_mod_email, transactions, sqlalchemy.engine.base.Engine

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console

[logger_{{cookiecutter.project_slug}}]
level = DEBUG
handlers = 
qualname = {{cookiecutter.project_slug}}

[logger_pyramid_mod_accounts]
level = DEBUG
handlers =
qualname = pyramid_mod_accounts

[logger_pyramid_mod_email]
level = DEBUG
handlers = 
qualname = pyramid_mod_email

[logger_transactions]
level = WARN
handlers = 
qualname = txn

[logger_sqlalchemy.engine.base.Engine]
level = WARN
handlers = 
qualname = sqlalchemy.engine.base.Engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s:%(lineno)s][%(threadName)s] %(message)s
